%script
/*
First step is to create the JSON table that will hold our data from our session log file. The log will provide the details of the time and account/user id.

Oracle Autonomous Data Warehouse supports storing JSON documents inside the database. Use following code to create a table to store the transaction log which is in JSON format
*/
BEGIN
      EXECUTE IMMEDIATE 'drop table json_sessionization';
  EXCEPTION
      WHEN OTHERS THEN NULL;
END;
/

BEGIN
      EXECUTE IMMEDIATE 'CREATE TABLE json_sessionization(session_doc CLOB, CONSTRAINT "VALID_JSON" CHECK (session_doc IS JSON) ENABLE)';
END;
/
/*
Next step is to add some data to our JSON table using the normal JSON notation of key-value pairs.
*/

BEGIN
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"1","user_id":"Mary"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"2","user_id":"Sam"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"11","user_id":"Mary"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"12","user_id":"Sam"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"22","user_id":"Sam"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"23","user_id":"Mary"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"32","user_id":"Sam"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"34","user_id":"Mary"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"43","user_id":"Sam"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"44","user_id":"Mary"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"47","user_id":"Sam"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"48","user_id":"Sam"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"53","user_id":"Mary"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"59","user_id":"Sam"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"60","user_id":"Sam"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"63","user_id":"Mary"}'')';
EXECUTE IMMEDIATE 'INSERT INTO json_sessionization VALUES (''{"time_id":"68","user_id":"Sam"}'')';
EXECUTE IMMEDIATE 'COMMIT';
END;
/
/*
Using the new JSON SQL notation we can query our data using a simple SELECT statement
*/

SELECT
  TO_NUMBER(j.session_doc.time_id) as time_id,
  j.session_doc.user_id as user_id
FROM json_sessionization j;


/*
Using MATCH_RECOGNIZE clause to create a sessionization report.The aim is to count the number of events within each session and calculate the duration of each session.

How do we do that? We can use some of the other built-in measures such as FIRST() and LAST() to extract values from our resultset and we can calculate new values such as the duration of a session.

In our code we will compute some new measures:

count(*) returns the number of events within a session
first(tstamp) returns the start time of each session
last(tstamp) returns the end time of each session
last(tstamp) - first(tstamp) calculates the duration of each session
*/

SELECT
 userid,
 session_id,
 no_of_events,
 start_time,
 end_time,
 session_duration
FROM (SELECT
       TO_NUMBER(j.session_doc.time_id) as time_id,
       j.session_doc.user_id as userid
     FROM json_sessionization j)
MATCH_RECOGNIZE(
   PARTITION BY userid ORDER BY time_id
   MEASURES match_number() as session_id,
            COUNT(*) as no_of_events,
            FIRST(b.time_id) start_time,
            LAST(s.time_id) end_time,
            LAST(s.time_id) - FIRST(b.time_id) session_duration
   ONE ROW PER MATCH
   PATTERN (b s+)
   DEFINE
       s as (time_id - PREV(time_id) <= 10)
 );
